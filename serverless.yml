service: realworld

provider:
  # aws provider with node runtime in useast1 region
  name: aws
  runtime: nodejs8.10
  region: us-east-1
  # set dd namespace env var
  environment:
    DYNAMODB_NAMESPACE: ${opt:stage, "dev"}
  # allow ddb actions against the 
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/*"

# dont package excluded files
package:
  exclude:
    - test/**
    - coverage/**
    - lambda-node-logo.png
    - .nyc_output/**

# include ddb local and serverless offline plugins
plugins:
  - serverless-dynamodb-local
  - serverless-offline

functions:

  ## Users API
  # createUser lambda handles posts to /api/users using the handler src/User.create
  createUser:
    handler: src/User.create
    events:
      - http:
          method: POST
          path: /api/users
          cors: true

  # loginUser lambda handles posts to /api/users/login with src/User.login handler
  loginUser:
    handler: src/User.login
    events:
      - http:
          method: POST
          path: /api/users/login
          cors: true

  # getUser lambda handles gets to /api/user with src/User.get handler.
  getUser:
    handler: src/User.get
    events:
      - http:
          method: GET
          path: /api/user
          cors: true

  # put to /api/user => updateUser
  updateUser:
    handler: src/User.update
    events:
      - http:
          method: PUT
          path: /api/user
          cors: true

  # get to /api/profile/{username} => getProfile
  getProfile:
    handler: src/User.getProfile
    events:
      - http:
          method: GET
          path: /api/profiles/{username}
          cors: true

  # post to /api/profiles/{username}/follow => followUser handler
  followUser:
    handler: src/User.follow
    events:
      - http:
          method: POST
          path: /api/profiles/{username}/follow
          cors: true

  # delete to /api/profiles/{username}/follow => unfollow handler
  unfollowUser:
    handler: src/User.follow
    events:
      - http:
          method: DELETE
          path: /api/profiles/{username}/follow
          cors: true

  ## Articles API
  # post to /api/articles => createArticle handler
  createArticle:
    handler: src/Article.create
    events:
      - http:
          method: POST
          path: /api/articles
          cors: true

  # get to /api/articles/slug => getArticle handler
  getArticle:
    handler: src/Article.get
    events:
      - http:
          method: GET
          path: /api/articles/{slug}
          cors: true

  # put to /api/articles/slug => updateArticle handler
  # put is idempotent: doesnt create new resource
  udpateArticle:
    handler: src/Article.update
    events:
      - http:
          method: PUT
          path: /api/articles/{slug}
          cors: true

  # delete to /api/articles/{slug} => fire deleteArticle handler
  deleteArticle:
    handler: src/Article.delete
    events:
      - http:
          method: DELETE
          path: /api/articles/{slug}
          cors: true

  # post to /api/articles/{slug}/favorite => fire favoriteArticle handler
  favoriteArticle:
    handler: src/Article.favorite
    events:
      - http:
          method: POST
          path: /api/articles/{slug}/favorite
          cors: true

  # delete to /api/articles/{slug}/favorite => use article.favorite handler
  unfavoriteArticle:
    handler: src/Article.favorite
    events:
      - http:
          method: DELETE
          path: /api/articles/{slug}/favorite
          cors: true

  # get to /api/articles => use Article.list handler
  listArticles:
    handler: src/Article.list
    events:
      - http:
          method: GET
          path: /api/articles
          cors: true

  # get to /api/articles/feed with Article.getFeed handler.
  getArticlesFeed:
    handler: src/Article.getFeed
    events:
      - http:
          method: GET
          path: /api/articles/feed
          cors: true

  # get to /api/tags => use Article.getTags handler
  getTags:
    handler: src/Article.getTags
    events:
      - http:
          method: GET
          path: /api/tags
          cors: true

  ## Comments API
  # post to /api/articles/{slug}/comments => use Comment.create handler
  createComment:
    handler: src/Comment.create
    events:
      - http:
          method: POST
          path: /api/articles/{slug}/comments
          cors: true

  # get to /api/articles/{slug}/comments => use Comment.get handler
  getComments:
    handler: src/Comment.get
    events:
      - http:
          method: GET
          path: /api/articles/{slug}/comments
          cors: true

  # delete to /api/articles/{slug}/comments/{id} => use Comment.delete handler
  deleteComment:
    handler: src/Comment.delete
    events:
      - http:
          method: DELETE
          path: /api/articles/{slug}/comments/{id}
          cors: true

  ## Utils API
  ping:
    handler: src/Util.ping
    events:
      - http:
          method: GET
          path: /api/ping
          cors: true

  purgeData:
    handler: src/Util.purgeData
    events:
      - http: DELETE /api/__TESTUTILS__/purge

resources:
  Resources:

    # create userddb resource with username, email keyed by email.
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: username
            AttributeType: S
          -
            AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: realworld-${self:provider.environment.DYNAMODB_NAMESPACE}-users
        GlobalSecondaryIndexes:
          -
            IndexName: email
            KeySchema:
              -
                AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    # create articles ddb table with slug => slug, dummy, updatedAt
    ArticlesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: slug
            AttributeType: S
          -
            AttributeName: dummy
            AttributeType: S
          -
            AttributeName: updatedAt
            AttributeType: N
        KeySchema:
          -
            AttributeName: slug
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
          # name realworld-<ddbnamespace>-article
        TableName: realworld-${self:provider.environment.DYNAMODB_NAMESPACE}-articles
        GlobalSecondaryIndexes:
          -
            IndexName: updatedAt
            KeySchema:
              -
                AttributeName: dummy
                KeyType: HASH
              -
                AttributeName: updatedAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    # comments table: 
    CommentsDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        # id maps to id, slug
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: slug
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: realworld-${self:provider.environment.DYNAMODB_NAMESPACE}-comments
        GlobalSecondaryIndexes:
          -
            # secondary index by article: keyed by slug
            IndexName: article
            KeySchema:
              -
                AttributeName: slug
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
